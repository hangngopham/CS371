package budget;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayDeque;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

public class GuiMain extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GuiMain frame = new GuiMain();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	//Overload the model isCellEditable(int row, int column)
	public boolean isCellEditable(int row, int column) {
		if(column == 3 || column == 4)
			return false;
		return true;
	}

	/**
	 * Create the frame.
	 */
	public GuiMain() {
		//ArrayDeque for Category objects
		ArrayDeque<Category> Categories = new ArrayDeque<Category>();
		
		//Set up the table.
		DefaultTableModel model = new DefaultTableModel();
		model.addColumn("Name");
		model.addColumn("Estimate");
		model.addColumn("Actual");
		model.addColumn("Difference");
		
		//All frames
		JSplitPane splitPane = new JSplitPane();
		splitPane.setResizeWeight(.40);
		Object listData[] = {};
		JList<Object> list = new JList<Object>(listData);
		JTable table = new JTable(model);
		JScrollPane scrollPane = new JScrollPane(table);
		
		//Build the window
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(50, 50, 900, 800);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new BorderLayout(0, 0));
		contentPane.add(splitPane, BorderLayout.CENTER);
		splitPane.setLeftComponent(list);
		splitPane.setRightComponent(scrollPane);
		
		//Setup the menu system
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		
		JMenu mnNewMenu = new JMenu("File");
		menuBar.add(mnNewMenu);
		
		JMenuItem mntmNewMenuItem = new JMenuItem("New Budget");
		mntmNewMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.out.println("HelloWorld!");
			}
		});
		mnNewMenu.add(mntmNewMenuItem);
		
		JMenuItem mntmNewMenuItem_1 = new JMenuItem("Save Budget");
		mnNewMenu.add(mntmNewMenuItem_1);
		
		JMenuItem mntmNewMenuItem_2 = new JMenuItem("Load Budget");
		mnNewMenu.add(mntmNewMenuItem_2);
		
		JMenuItem mntmNewMenuItem_3 = new JMenuItem("Exit");
		mntmNewMenuItem_3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		mnNewMenu.add(mntmNewMenuItem_3);
		
		JMenu mnNewMenu_1 = new JMenu("Add");
		menuBar.add(mnNewMenu_1);
		
		JMenuItem mntmCategoryMenuItem = new JMenuItem("Category");
		mnNewMenu_1.add(mntmCategoryMenuItem);
		mntmCategoryMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Categories.addLast(new Category());
				model.addRow(Categories.peekLast().getVector());
			}
		});
		
		JMenuItem mntmTransactionem = new JMenuItem("Transaction");
		mnNewMenu_1.add(mntmTransactionem);
	}
}
